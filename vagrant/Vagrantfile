# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure('2') do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = 'ubuntu/xenial64'

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 3000, host: 3001

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # config.ssh.forward_agent = true

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider 'virtualbox' do |vb|
    # Display the VirtualBox GUI when booting the machine
    # vb.gui = true

    # Customize the amount of memory on the VM:
    vb.memory = '2048'

    vb.name = 'dev_build'
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.

  # https://github.com/Varying-Vagrant-Vagrants/VVV/issues/517#issuecomment-160411807
  config.vm.provision 'fix-no-tty', type: 'shell' do |s|
    s.privileged = false
    s.inline = "sudo sed -i '/tty/!s/mesg n/tty -s \\&\\& mesg n/' /root/.profile"
  end

  config.vm.provision 'packages', type: 'shell', inline: <<-SHELL
    echo "Add Docker's repository"
    apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D
    echo "deb https://apt.dockerproject.org/repo ubuntu-xenial main" | sudo tee /etc/apt/sources.list.d/docker.list

    echo 'Updating packages'
    apt-get update -yqq
    echo 'Upgrading packages'
    apt-get upgrade -yqq
    echo 'Installing dev tools'
    apt-get install -yqq build-essential cmake python python-dev python3-dev libncurses5-dev
    echo 'Installing utils'
    apt-get install -yqq curl git silversearcher-ag tmux vim xlclip zsh
    echo 'Installing docker'
    apt-get install -yqq apt-transport-https ca-certificates
    apt-get install -yqq linux-image-extra-$(uname -r) linux-image-extra-virtual
    apt-get install -yqq --allow-unauthenticated docker-engine
  SHELL

  config.vm.provision 'docker', type: 'shell', inline: <<-SHELL
    echo 'Start Docker on the boot'
    service docker start
    systemctl enable docker
  SHELL

  config.vm.provision 'docker-compose', type: 'shell', inline: <<-SHELL
    echo 'Installing docker-compose'
    curl -L https://github.com/docker/compose/releases/download/1.9.0/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose
    chmod +x /usr/local/bin/docker-compose
  SHELL

  config.vm.provision 'create_vagrant_user', type: 'shell', inline: <<-SHELL
    useradd -m -s /bin/zsh -U vagrant -G sudo,docker
    echo "vagrant:vagrant" | chpasswd
  SHELL

  config.vm.provision 'dotfiles', type: 'shell', inline: <<-SHELL
    echo 'Installing dotfiles'
    su -c "cd /home/vagrant && git clone https://github.com/goozler/dotfiles.git" vagrant
    su -c "/home/vagrant/dotfiles/install.sh" vagrant
  SHELL

  config.vm.provision 'ssh_key', type: 'shell', inline: <<-SHELL
    echo 'Set Vagrant ssh key'
    su -c "mkdir /home/vagrant/.ssh" vagrant
    su -c "wget --no-check-certificate \
           'https://github.com/mitchellh/vagrant/raw/master/keys/vagrant.pub' \
           -O /home/vagrant/.ssh/authorized_keys" vagrant
    su -c "chown -R vagrant /home/vagrant/.ssh" vagrant
    su -c "chmod -R go-rwsx /home/vagrant/.ssh" vagrant
  SHELL
end
